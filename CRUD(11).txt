//to start mongo client
gurukul@ubuntu:~$ mongo

//to list out database names
> show dbs

//to create database
> use db1

//to check in which database I am working
> db

//to drop database in which I am working
> db.dropDatabase()

//To create collection
> db.createCollection('stud')

//to list out collection names
> show collections

//create collection by inserting document
> db.emp.insert({rno:1,name:'Bhavana'})

//Every row/document can be different than other 
> db.emp.insert({name:'Amit',rno:2})
> db.emp.insert({rno:3, email_id:'a@gmail.com'})

// To display data from collection
> db.emp.find()
{ "_id" : ObjectId("5d7d3daf315728b4998f522e"), "rno" : 1, "name" : "Bhavana" }
{ "_id" : ObjectId("5d7d3f28315728b4998f522f"), "name" : "Amit", "rno" : 2 }
{ "_id" : ObjectId("5d7d3f56315728b4998f5230"), "rno" : 3, "email_id" : "a@gmail.com" }

//insert data by providing _id value
> db.emp.insert({_id:1,rno:4,name:"Akash"})

> db.emp.find()
{ "_id" : ObjectId("5d7d3daf315728b4998f522e"), "rno" : 1, "name" : "Bhavana" }
{ "_id" : ObjectId("5d7d3f28315728b4998f522f"), "name" : "Amit", "rno" : 2 }
{ "_id" : ObjectId("5d7d3f56315728b4998f5230"), "rno" : 3, "email_id" : "a@gmail.com" }
{ "_id" : 1, "rno" : 4, "name" : "Akash" }

// trying to insert data with duplicate _id, it will not accept as _id is primary key field
> db.emp.insert({_id:1,rno:5,name:"Reena"})
E11000 duplicate key error index: db1.emp.$_id_  dup key: { : 1.0 }
 
//Insert multiple documents at once
> db.emp.insert([{rno:7,name:'a'},{rno:8,name:'b'},{rno:8,name:'c'}])

> db.emp.find()
{ "_id" : ObjectId("5d7d3daf315728b4998f522e"), "rno" : 1, "name" : "Bhavana" }
{ "_id" : ObjectId("5d7d3f28315728b4998f522f"), "name" : "Amit", "rno" : 2 }
{ "_id" : ObjectId("5d7d3f56315728b4998f5230"), "rno" : 3, "email_id" : "a@gmail.com" }
{ "_id" : 1, "rno" : 4, "name" : "Akash" }
{ "_id" : 2, "rno" : 5, "name" : "Reena" }
{ "_id" : ObjectId("5d7d4244315728b4998f5231"), "rno" : 7, "name" : "a" }
{ "_id" : ObjectId("5d7d4244315728b4998f5232"), "rno" : 8, "name" : "b" }
{ "_id" : ObjectId("5d7d4244315728b4998f5233"), "rno" : 8, "name" : "c" }


// to insert multiple values for one key using []

> db.emp.insert({rno:10,name:'Ankit',hobbies:['singing','cricket','swimming'],age:21})

> db.emp.find()
{ "_id" : ObjectId("5d7d3daf315728b4998f522e"), "rno" : 1, "name" : "Bhavana" }
{ "_id" : ObjectId("5d7d3f28315728b4998f522f"), "name" : "Amit", "rno" : 2 }
{ "_id" : ObjectId("5d7d3f56315728b4998f5230"), "rno" : 3, "email_id" : "a@gmail.com" }
{ "_id" : 1, "rno" : 4, "name" : "Akash" }
{ "_id" : 2, "rno" : 5, "name" : "Reena" }
{ "_id" : ObjectId("5d7d4244315728b4998f5231"), "rno" : 7, "name" : "a" }
{ "_id" : ObjectId("5d7d4244315728b4998f5232"), "rno" : 8, "name" : "b" }
{ "_id" : ObjectId("5d7d4244315728b4998f5233"), "rno" : 8, "name" : "c" }
{ "_id" : ObjectId("5d7d433a315728b4998f5234"), "rno" : 10, "name" : "Ankit", "hobbies" : [  "singing",  "cricket",  "swimming" ], "age" : 21 }


// Embedded document example
> db.emp.insert({rno:11, Name: {Fname:"Bhavana", Mname:"Amit", Lname:"Khivsara"}})
> db.emp.insert({rno:12, Name: "Janvi", Address:{Flat:501, Building:"Sai Appart", area:"Tidke colony", city: "Nashik", state:"MH", pin:423101}, age:22})



// To insert date use ISODate function

> db.emp.insert({rno:15, name:'Ravina', dob: ISODate("2019-09-14")})

> db.emp.find()
{ "_id" : ObjectId("5d7d3daf315728b4998f522e"), "rno" : 1, "name" : "Bhavana" }
{ "_id" : ObjectId("5d7d3f28315728b4998f522f"), "name" : "Amit", "rno" : 2 }
{ "_id" : ObjectId("5d7d3f56315728b4998f5230"), "rno" : 3, "email_id" : "a@gmail.com" }
{ "_id" : 1, "rno" : 4, "name" : "Akash" }
{ "_id" : 2, "rno" : 5, "name" : "Reena" }
{ "_id" : ObjectId("5d7d4244315728b4998f5231"), "rno" : 7, "name" : "a" }
{ "_id" : ObjectId("5d7d4244315728b4998f5232"), "rno" : 8, "name" : "b" }
{ "_id" : ObjectId("5d7d4244315728b4998f5233"), "rno" : 8, "name" : "c" }
{ "_id" : ObjectId("5d7d433a315728b4998f5234"), "rno" : 10, "name" : "Ankit", "hobbies" : [  "singing",  "cricket",  "swimming" ], "age" : 21 }
{ "_id" : ObjectId("5d7d4462315728b4998f5235"), "rno" : 11, "Name" : { "Fname" : "Bhavana", "Mname" : "Amit", "Lname" : "Khivsara" } }
{ "_id" : ObjectId("5d7d4574315728b4998f5236"), "rno" : 12, "Name" : "Janvi", "Address" : { "Flat" : 501, "Building" : "Sai Appart", "area" : "Tidke colony", "city" : "Nashik", "state" : "MH", "pin" : 423101 }, "age" : 22 }
{ "_id" : ObjectId("5d7d465d315728b4998f5237"), "rno" : 15, "name" : "Ravina", "dob" : ISODate("2019-09-14T00:00:00Z") }
> 


// Multi embedded document with data function
> db.emp.insert({rno:17, name:"Ashika",date:Date(), awards:[{name:"Best c -Designer", year:2010, prize:"winner"},{name:"Wen site competition",year:2012,prize:"Runner-up"},{name:"Fashion show", year:2015,prize:"winner"}], city:"Nashik"})


// ouput using pretty command
> db.emp.find().pretty()
{
	"_id" : ObjectId("5d7d3daf315728b4998f522e"),
	"rno" : 1,
	"name" : "Bhavana"
}
{ "_id" : ObjectId("5d7d3f28315728b4998f522f"), "name" : "Amit", "rno" : 2 }
{
	"_id" : ObjectId("5d7d3f56315728b4998f5230"),
	"rno" : 3,
	"email_id" : "a@gmail.com"
}
{ "_id" : 1, "rno" : 4, "name" : "Akash" }
{ "_id" : 2, "rno" : 5, "name" : "Reena" }
{ "_id" : ObjectId("5d7d4244315728b4998f5231"), "rno" : 7, "name" : "a" }
{ "_id" : ObjectId("5d7d4244315728b4998f5232"), "rno" : 8, "name" : "b" }
{ "_id" : ObjectId("5d7d4244315728b4998f5233"), "rno" : 8, "name" : "c" }
{
	"_id" : ObjectId("5d7d433a315728b4998f5234"),
	"rno" : 10,
	"name" : "Ankit",
	"hobbies" : [
		"singing",
		"cricket",
		"swimming"
	],
	"age" : 21
}
{
	"_id" : ObjectId("5d7d4462315728b4998f5235"),
	"rno" : 11,
	"Name" : {
		"Fname" : "Bhavana",
		"Mname" : "Amit",
		"Lname" : "Khivsara"
	}
}
{
	"_id" : ObjectId("5d7d4574315728b4998f5236"),
	"rno" : 12,
	"Name" : "Janvi",
	"Address" : {
		"Flat" : 501,
		"Building" : "Sai Appart",
		"area" : "Tidke colony",
		"city" : "Nashik",
		"state" : "MH",
		"pin" : 423101
	},
	"age" : 22
}
{
	"_id" : ObjectId("5d7d465d315728b4998f5237"),
	"rno" : 15,
	"name" : "Ravina",
	"dob" : ISODate("2019-09-14T00:00:00Z")
}
{
	"_id" : ObjectId("5d7d4aa7315728b4998f5238"),
	"rno" : 17,
	"name" : "Ashika",
	"date" : "Sat Sep 14 2019 16:16:39 GMT-0400 (EDT)",
	"awards" : [
		{
			"name" : "Best C-designer",
			"year" : 2010,
			"prize" : "winner"
		},
		{
			"name" : "Wen site competition",
			"year" : 2012,
			"prize" : "Runner-up"
		},
		{
			"name" : "Fashion show",
			"year" : 2015,
			"prize" : "winner"
		}
	],
	"city" : "Nashik"
}


// New collection for Find operation

> db.stud.insert([{rno:1, name:'Ashiti'}, {rno:2,name:'Savita'}, {rno:3,name:'Sagar'}, {rno:4,name:'Reena'},{rno:5,name:'Jivan'}])


//Simple Find Command
> db.stud.find()
{ "_id" : ObjectId("5d83af5aa44331f62bcd8369"), "rno" : 1, "name" : "Ashiti" }
{ "_id" : ObjectId("5d83af5aa44331f62bcd836a"), "rno" : 2, "name" : "Savita" }
{ "_id" : ObjectId("5d83af5aa44331f62bcd836b"), "rno" : 3, "name" : "Sagar" }
{ "_id" : ObjectId("5d83af5aa44331f62bcd836c"), "rno" : 4, "name" : "Reena" }
{ "_id" : ObjectId("5d83af5aa44331f62bcd836d"), "rno" : 5, "name" : "Jivan" }


//Find command with Condition 
> db.stud.find({rno:5})
{ "_id" : ObjectId("5d83af5aa44331f62bcd836d"), "rno" : 5, "name" : "Jivan" }


//Find command with condition with giving name field only to show 
> db.stud.find({rno:5},{name:1})
{ "_id" : ObjectId("5d83af5aa44331f62bcd836d"), "name" : "Jivan" }

//Find command with condition with giving name field only to show and _id to hide
> db.stud.find({rno:5},{name:1,_id:0})
{ "name" : "Jivan" }

// Find command to show only names without condition
> db.stud.find({},{name:1,_id:0})
{ "name" : "Ashiti" }
{ "name" : "Savita" }
{ "name" : "Sagar" }
{ "name" : "Reena" }
{ "name" : "Jivan" }

// To display data whose rno is greater than 2
> db.stud.find({rno:{$gt:2}})
{ "_id" : ObjectId("5d83af5aa44331f62bcd836b"), "rno" : 3, "name" : "Sagar" }
{ "_id" : ObjectId("5d83af5aa44331f62bcd836c"), "rno" : 4, "name" : "Reena" }
{ "_id" : ObjectId("5d83af5aa44331f62bcd836d"), "rno" : 5, "name" : "Jivan" }

// To display data whose rno is less than equal to  2
> db.stud.find({rno:{$lte:2}})
{ "_id" : ObjectId("5d83af5aa44331f62bcd8369"), "rno" : 1, "name" : "Ashiti" }
{ "_id" : ObjectId("5d83af5aa44331f62bcd836a"), "rno" : 2, "name" : "Savita" }

// To display data whose rno is less than 2
> db.stud.find({rno:{$lt:2}})
{ "_id" : ObjectId("5d83af5aa44331f62bcd8369"), "rno" : 1, "name" : "Ashiti" }

// To display data whose rno is not equal to 2
> db.stud.find({rno:{$ne:2}})
{ "_id" : ObjectId("5d83af5aa44331f62bcd8369"), "rno" : 1, "name" : "Ashiti" }
{ "_id" : ObjectId("5d83af5aa44331f62bcd836b"), "rno" : 3, "name" : "Sagar" }
{ "_id" : ObjectId("5d83af5aa44331f62bcd836c"), "rno" : 4, "name" : "Reena" }
{ "_id" : ObjectId("5d83af5aa44331f62bcd836d"), "rno" : 5, "name" : "Jivan" }

// To display data whose rno is either 1 or 3 or 5 using in operator
> db.stud.find({rno:{$in:[1,3,5]}})
{ "_id" : ObjectId("5d83af5aa44331f62bcd8369"), "rno" : 1, "name" : "Ashiti" }
{ "_id" : ObjectId("5d83af5aa44331f62bcd836b"), "rno" : 3, "name" : "Sagar" }
{ "_id" : ObjectId("5d83af5aa44331f62bcd836d"), "rno" : 5, "name" : "Jivan" }

// To display data whose rno is either 1 or 3 or 5 or 7 or 9 using in operator
> db.stud.find({rno:{$in:[1,3,5,7,9]}})
{ "_id" : ObjectId("5d83af5aa44331f62bcd8369"), "rno" : 1, "name" : "Ashiti" }
{ "_id" : ObjectId("5d83af5aa44331f62bcd836b"), "rno" : 3, "name" : "Sagar" }
{ "_id" : ObjectId("5d83af5aa44331f62bcd836d"), "rno" : 5, "name" : "Jivan" }

//Sorting Command -1 is for Descending
> db.stud.find().sort({rno:-1})
{ "_id" : ObjectId("5d83af5aa44331f62bcd836d"), "rno" : 5, "name" : "Jivan" }
{ "_id" : ObjectId("5d83af5aa44331f62bcd836c"), "rno" : 4, "name" : "Reena" }
{ "_id" : ObjectId("5d83af5aa44331f62bcd836b"), "rno" : 3, "name" : "Sagar" }
{ "_id" : ObjectId("5d83af5aa44331f62bcd836a"), "rno" : 2, "name" : "Savita" }
{ "_id" : ObjectId("5d83af5aa44331f62bcd8369"), "rno" : 1, "name" : "Ashiti" }

//Sorting Command 1 is for Ascending
> db.stud.find().sort({name:1})
{ "_id" : ObjectId("5d83af5aa44331f62bcd8369"), "rno" : 1, "name" : "Ashiti" }
{ "_id" : ObjectId("5d83af5aa44331f62bcd836d"), "rno" : 5, "name" : "Jivan" }
{ "_id" : ObjectId("5d83af5aa44331f62bcd836c"), "rno" : 4, "name" : "Reena" }
{ "_id" : ObjectId("5d83af5aa44331f62bcd836b"), "rno" : 3, "name" : "Sagar" }
{ "_id" : ObjectId("5d83af5aa44331f62bcd836a"), "rno" : 2, "name" : "Savita" }

//Dispay rno & name whose rno is greater than 2. Show output in decending order by rno
> db.stud.find({rno:{$gt:2}},{_id:0}).sort({rno:-1})
{ "rno" : 5, "name" : "Jivan" }
{ "rno" : 4, "name" : "Reena" }
{ "rno" : 3, "name" : "Sagar" }

//Collection with 3 and 5 rollno as duplicate values
> db.stud.find()
{ "_id" : ObjectId("5d83af5aa44331f62bcd8369"), "rno" : 1, "name" : "Ashiti" }
{ "_id" : ObjectId("5d83af5aa44331f62bcd836a"), "rno" : 2, "name" : "Savita" }
{ "_id" : ObjectId("5d83af5aa44331f62bcd836b"), "rno" : 3, "name" : "Sagar" }
{ "_id" : ObjectId("5d83af5aa44331f62bcd836c"), "rno" : 4, "name" : "Reena" }
{ "_id" : ObjectId("5d83af5aa44331f62bcd836d"), "rno" : 5, "name" : "Jivan" }
{ "_id" : ObjectId("5d83b8d9a44331f62bcd836e"), "rno" : 5, "name" : "Radhika" }
{ "_id" : ObjectId("5d83b8eba44331f62bcd836f"), "rno" : 3, "name" : "Manioj" }

//Distinct command to show only unique values for roll no
> db.stud.distinct("rno")
[ 1, 2, 3, 4, 5 ]

// Limit use to show only some records from starting- following command shows only first 2 records from collection

> db.stud.find().limit(2)
{ "_id" : ObjectId("5d83af5aa44331f62bcd8369"), "rno" : 1, "name" : "Ashiti" }
{ "_id" : ObjectId("5d83af5aa44331f62bcd836a"), "rno" : 2, "name" : "Savita" }


// Skip use to show all records after skipping some records- following command shows all records after first 2 records from collection
> db.stud.find().skip(2)
{ "_id" : ObjectId("5d83af5aa44331f62bcd836b"), "rno" : 3, "name" : "Sagar" }
{ "_id" : ObjectId("5d83af5aa44331f62bcd836c"), "rno" : 4, "name" : "Reena" }
{ "_id" : ObjectId("5d83af5aa44331f62bcd836d"), "rno" : 5, "name" : "Jivan" }
{ "_id" : ObjectId("5d83b8d9a44331f62bcd836e"), "rno" : 5, "name" : "Radhika" }
{ "_id" : ObjectId("5d83b8eba44331f62bcd836f"), "rno" : 3, "name" : "Manioj" }
// Shows documents where name starting with A
> db.stud.find({name:/^A/})
{ "_id" : ObjectId("5d83af5aa44331f62bcd8369"), "rno" : 1, "name" : "Ashiti" }

// Shows documents where name ending with i
> db.stud.find({name:/i$/})
{ "_id" : ObjectId("5d83af5aa44331f62bcd8369"), "rno" : 1, "name" : "Ashiti" }


// Shows documents where name having letter  a anywhere 
> db.stud.find({name:/a/})
{ "_id" : ObjectId("5d83af5aa44331f62bcd836a"), "rno" : 2, "name" : "Savita" }
{ "_id" : ObjectId("5d83af5aa44331f62bcd836b"), "rno" : 3, "name" : "Sagar" }
{ "_id" : ObjectId("5d83af5aa44331f62bcd836c"), "rno" : 4, "name" : "Reena" }
{ "_id" : ObjectId("5d83af5aa44331f62bcd836d"), "rno" : 5, "name" : "Jivan" }
{ "_id" : ObjectId("5d83b8d9a44331f62bcd836e"), "rno" : 5, "name" : "Radhika" }
{ "_id" : ObjectId("5d83b8eba44331f62bcd836f"), "rno" : 3, "name" : "Manioj" }
> 

//findOne to show only first record
> db.stud.findOne()
{
	"_id" : ObjectId("5d83af5aa44331f62bcd8369"),
	"rno" : 1,
	"name" : "Ashiti"
}

// count to show number of documents in collection
> db.stud.find().count()
7

> db.stud.find({rno:{$gt:2}}).count()
5

//Insert one embedded document( for address)
> db.stud.insert({rno:8,address:{area:"College Road",city:"Nashik",state:"MH"},name:"Arya"})

//To find document having city as Nashik(as city is key of address key specify "address.city"
> db.stud.find({"address.city":"Nashik"})
{ "_id" : ObjectId("5d83c04aa44331f62bcd8370"), "rno" : 8, "address" : { "area" : "College Road", "city" : "Nashik", "state" : "MH" }, "name" : "Arya" }


//Insert one document with multiple values(eg hobbies)
> db.stud.insert({rno:9,hobbies:['singing','dancing','cricket']})

//To use find command on multi values attribute(eg hobbies)
> db.stud.find({hobbies:'dancing'})
{ "_id" : ObjectId("5d83c165a44331f62bcd8371"), "rno" : 9, "hobbies" : [  "singing",  "dancing",  "cricket" ] }

//$unset will remove the column rno from document matching the given condition
> db.stud.update({rno:1},{$unset:{rno:1}})

//$set to update the value of rno
>db.stud.update({rno:2},{$set:{rno:22}})

//upsert use to update document if condition found otherwise insert document with updates values.
> db.stud.update({rno:50},{$set:{rno:55}},{upsert:true})

//multi:true used to update in multiple documents
> db.stud.update({rno:5},{$set:{rno:15}},{multiple:true})

//It will remove record having rno as 4
> db.stud.remove({rno:4})

//It will remove only one record having rno as 4
> db.stud.remove({rno:4},1)

//It will remove all records
> db.stud.remove({})









































































































> 

















































 























